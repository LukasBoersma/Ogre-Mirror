/*
-----------------------------------------------------------------------------
This source file is part of OGRE
    (Object-oriented Graphics Rendering Engine)
For the latest info, see http://www.ogre3d.org/

Copyright (c) 2000-2018 Torus Knot Software Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-----------------------------------------------------------------------------
*/
#ifndef _OgreHlmsDiskCache_H_
#define _OgreHlmsDiskCache_H_

#include "OgreHlms.h"
#include "OgreHeaderPrefix.h"

namespace Ogre
{
    /** \addtogroup Core
    *  @{
    */
    /** \addtogroup Resources
    *  @{
    */

    /** @class HlmsDiskCache

        This class allows saving the current state of an Hlms to disk: both its compiled shaders
        with source and the generated PSOs.

        This allows cutting down stalls by compiling at loading time.

        This cache is not meant to be used with HLMS_COMPUTE or HLMS_LOW_LEVEL.

        The cache saves several layers:
            1. The preprocessed shader
            2. The properties used to generate the shader, in case the template becomes out of date
            3. The generated PSO pairs.

        The layer 1 can only be used for the same platform & RenderSystem it was built for (e.g. a
        cache built for Windows+D3D11 can only be used there). However the rest of the layers work
        on any platform on any RenderSystem.

        The cache cannot be used if it was generated with a different value of
        OGRE_DEBUG_STR_SIZE (i.e. see IdString) unless the current value of OGRE_DEBUG_STR_SIZE is 0.

        In practice this means caches generated by Debug builds can be used in Release, but caches
        generated by Release builds cannot be used in Debug, unless OGRE_IDSTRING_ALWAYS_READABLE
        was set for the Release build.

        Decrease loading times further by also enabling the microcode cache.
        See http://wiki.ogre3d.org/Ogre+2.1+FAQ#Starting_my_app_takes_forever_particularly_Direct3D11_
    */
    class _OgreExport HlmsDiskCache : public HlmsAlloc
    {
    public:
        struct SourceCode
        {
            Hlms::RenderableCache   mergedCache;
            String                  sourceFile[NumShaderTypes];

            SourceCode();
            SourceCode( const Hlms::ShaderCodeCache &shaderCodeCache );
        };

        typedef vector<SourceCode>::type SourceCodeVec;

        struct Pso
        {
            Hlms::RenderableCache   renderableCache;
            HlmsPropertyVec         passProperties;
            HlmsPso                 pso;
            HlmsMacroblock          macroblock;
            HlmsBlendblock          blendblock;

            Pso();
            Pso( const Hlms::RenderableCache &srcRenderableCache, const Hlms::PassCache &srcPassCache,
                 const HlmsCache *srcPsoCache );
        };

        typedef vector<Pso>::type PsoVec;

        struct Cache
        {
            uint64          templateHash[2]; //128 bit hash
            uint8           type;           /// See HlmsTypes
            SourceCodeVec   sourceCode;
            PsoVec          pso;
        };

        bool        mTemplatesOutOfDate;
        Cache       mCache;
        HlmsManager *mHlmsManager;
        String      mShaderProfile;
        uint16      mDebugStrSize;

        void save( DataStreamPtr &dataStream, const IdString &hashedString );
        void save( DataStreamPtr &dataStream, const String &string );
        void save( DataStreamPtr &dataStream, const HlmsPropertyVec &properties );
        void save( DataStreamPtr &dataStream, const Hlms::RenderableCache &renderableCache );

        void load( DataStreamPtr &dataStream, IdString &hashedString );
        void load( DataStreamPtr &dataStream, String &string );
        void load( DataStreamPtr &dataStream, HlmsPropertyVec &properties );
        void load( DataStreamPtr &dataStream, Hlms::RenderableCache &renderableCache );

    public:
        HlmsDiskCache( HlmsManager *hlmsManager );
        ~HlmsDiskCache();

        void clearCache(void);

        void copyFrom( Hlms *hlms );
        void applyTo( Hlms *hlms );

        void saveTo( DataStreamPtr &dataStream );
        void loadFrom( DataStreamPtr &dataStream );
    };

    /** @} */
    /** @} */

}

#include "OgreHeaderSuffix.h"

#endif
